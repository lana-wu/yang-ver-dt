<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC6020 SYSTEM "reference.RFC.6020.xml">
  <!ENTITY RFC7895 SYSTEM "reference.RFC.7895.xml">
  <!ENTITY RFC7950 SYSTEM "reference.RFC.7950.xml">
  <!ENTITY RFC8199 SYSTEM "reference.RFC.8199.xml">
  <!ENTITY RFC8299 SYSTEM "reference.RFC.8299.xml">
  <!ENTITY RFC8049 SYSTEM "reference.RFC.8049.xml">
  <!ENTITY RFC2119 SYSTEM "reference.RFC.2119.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="info" ipr="trust200902" docName="draft-verdt-netmod-yang-solutions-02">
  <front>
    <title abbrev="YANG Versioning Solution Overview">YANG Versioning Solution Overview</title>

    <author initials="R." surname="Wilton" fullname="Robert Wilton">
      <organization>Cisco Systems, Inc.</organization>
    </author>
    <date/>
    <abstract>
      <t>
	This temporary document gives a brief overview of the different drafts
	that comprise a full solution to the YANG versioning requirements draft.
	The purpose of this draft is to help readers understand how the discrete
	parts of the YANG versioning solution fit together during working group
	development of the solution drafts.
      </t>
    </abstract>

  </front>
  <middle>
    <section anchor="intro" title="Introduction">
      <t>TODO - Fixup references to individual drafts.</t>
      <t><xref target="I-D.ietf-netmod-yang-versioning-reqs"/> documents the
      requirements for any solution to the YANG versioning problem.  Chapter 5
      lists the formal requirements that a complete solution requires.</t>
      <t>The aim of this draft is to help readers understand how the
      different solution drafts fit together, and also which drafts contribute
      solutions to particular individual requirements.  The overall solution
      comprises five individual drafts:
      <list style="numbers">
	<t>Module revision extensions</t>
	<t>Module semantic version number scheme</t>
	<t><xref target="I-D.rwilton-netmod-yang-packages"/></t>
	<t><xref target="I-D.wilton-netmod-yang-ver-selection"/></t>
	<t>YANG schema comparison tooling (not yet published)</t>
      </list>
      </t>

      <t>Open issues, across all of the solution drafts are tracked at <eref
      target="https://github.com/netmod-wg/yang-ver-dt/issues"/>.</t>
    </section>

    <section anchor="reqs" title="Summary of requirements">
      <t>The requirements are formally documented in section 5 of <xref
      target="I-D.ietf-netmod-yang-versioning-reqs"/>.  A shortened, non
      normative, summary of each of the requirements (using the same requirement
      numbers) is provided below to help understand how the solutions drafts
      address the particular requirements.</t>
      <t>
        <list>
          <t>Req 1.1 - MUST allow nbc updates to a module without breaking
          imports.</t>
          <t>Req 1.2 - MUST allow nbc updates to a module without affecting
          existing client code using only unchanged data nodes.</t>
          <t>Req 1.3 - MUST support import statement restricted to only some
          revisions.</t>
          <t>Req 1.4 - MUST allow for fixes to non-latest published modules.</t>
          <t>Req 2.1 - MUST be able to determine if two arbitrary versions of
          any module are backwards-compatible.</t>
          <t>Req 2.2 - SHOULD be able to determine if two arbitrary versions of
          any data node are backwards-compatible.</t>
          <t>Req 3.1 - MUST allow servers to support existing clients.</t>
	  <t>Req 3.2 - MUST allow simultaneously support of clients using
	  different (perhaps restricted) revisions.</t>
	  <t>Req 3.3 - MAY assume clients can handle unexpected instance data
	  gracefully.</t>
          <t>Req 4.1 - MUST provide a way to indicate if deprecated nodes are
          implemented.</t>
	  <t>Req 4.2 - MUST be able to document the reason for data node
	  lifecycle changes, and possible alternative data nodes.</t>
	  <t>Req 4.3 - MUST be able to forewarn of future data node lifecycle
	  changes.</t>
          <t>Req 5.1 - MUST provide guidance on how to use the new scheme.</t>
	  <t>Req 5.2 - MUST provide, and document, an upgrade path from existing
	  YANG/protocols.</t>
	  <t>Req 5.3 - MUST consider the impact of versioning on instance
	  data.</t>
        </list>
      </t>
    </section>

    <section anchor="soln_drafts" title="Solution Drafts">
      <t>The complete solution to the YANG versioning requirements comprises five
      solution drafts, that are summarized below.</t>
      <section anchor="module_versioning" title="Updated YANG Module Revision Handling">
	<t>In summary, [TODO - Insert draft ref] specifies minimal extensions and updates to
	the YANG language, YANG Library, and YANG author guidelines to provide
	more flexible YANG module revision handling.  The intent is that these
	changes and extensions could be folded into future revisions of the
	updated specifications.  The draft provides a solution for all
	requirements except Req 2.2, Req 3.1 and Req 3.2.</t>
	<t>The extensions and changes in the draft can be summarized thus:
	<list style="symbols">
	<t>It defines a YANG extension statement to indicate where
	non-backwards-compatible changes have occurred in a module's revision
	history.</t>
	<t>It relaxes the rules for the module revision history to allow for a
	non-linear module revision history.  I.e., any given module revision may
	have multiple revisions directly derived from it.</t>
	<t>It defines a new import extension statement that restricts the
	allowed module revisions that satisfy the import to only those derived
	from a specified module revision.</t>
	<t>It defines a revision label extension statement to allow an
	informative name to be associated with a particular revision date, and
	to be used in import statements, YANG module filenames, and is available
	in YANG library.  One example of how the revision label could be used is
	to associate a semantic versioning scheme to YANG module revisions.</t>
	<t>It updates the YANG rules for changes between module revisions that
	are allowed to be classified as backwards-compatible.  In particular,
	marking a node as obsolete is no longer classified as a backwards
	compatible change.</t>
	<t>It provides updated guidance on how servers handle deprecated and
	obsolete YANG nodes and augments YANG library with additional leaves to
	report the server's behavior to clients.</t>
	<t>It provides an extension statement to allow a description statement
	to be associated with a YANG status statement, providing more
	information about why the status has changed.</t>
	<t>It defines how versioning relates to YANG instance data.</t>
	<t>It refines the guidelines for updating modules, taking into
	consideration that non-backwards-compatible changes are sometimes
	necessary for various pragmatic reasons.</t>
	</list></t>
      </section>
      <section anchor="module_semver" title="Module semantic version number scheme">
	<t>[TODO - Insert draft ref] defines a semantic versioning scheme derived from the
	semver.org 2.0.0 specification that can be used in conjunction with the
	revision label extension statement defined in <xref
	target="module_versioning"/> to allow semantic version numbers to be
	used to manage the revision lifecycle of YANG modules.  This draft
	provides an enhanced solution for Req 2.1, but organizations authoring
	modules are not obliged to use this specific versioning scheme, and
	could choose a different overlaid versioning scheme, or none at all and
	rely solely on revision dates.</t>
	<t>The aims of the YANG semantic versioning scheme are:
	<list>
	  <t>To generally allow clients to determine whether NBC
	  changes have occurred between two revisions from the version
	  number alone, without having to check the full revision
	  history.</t>
	  <t>To give a more informative identifier for a branched
	  revision history over revision dates alone.</t>
	  <t>To allow revision branches that contain fixes for
	  published non-latest releases.</t>
	</list>
	</t>
      </section>
      <section anchor="yang_pkgs" title="Versioned YANG packages">
	<t>The two previous drafts address version and revision
	management of individual modules.  <xref
	target="I-D.rwilton-netmod-yang-packages"/> provides a
	mechanism to group a set of related YANG modules revisions
	together, into a construct called a YANG package, and to apply
	a version scheme to the group.</t>
	<t>The core part of this draft are YANG module definitions
	that define a YANG package, that are used as an augmentation
	to YANG library, and also in YANG instance data documents for
	offline access.</t>
	<t>The principle aims of the packages draft are:
	<list>
	  <t>To provide an alternative simpler mechanism to manage conformance
	  of modules.  Rather than checking conformance against a set of
	  individual YANG module revisions, it should be easier to check for
	  conformance against a much smaller set of YANG package versions.</t>
	  <t>To provide an easier mechanism for clients to check conformance
	  with a server.  Rather that downloading and comparing all individual
	  module revisions, the client can just check whether the package
	  version is compatible.  The package definition could be retrieved and
	  cached from multiple sources.</t>
	  </list>
	</t>
	<t>The YANG packages draft does not address any of the
	versioning requirements directly, but provides the foundation
	building blocks for the version selection solution, described in <xref
	target="ver_sel"/>, that addresses Reqs 3.1 and 3.2.</t>
      </section>
      <section anchor="ver_sel" title="Protocol operations for package version selection">
	<t><xref target="I-D.wilton-netmod-yang-ver-selection"/>
	specifies a solution for requirements 3.1 and 3.2 is via the
	use of <xref target="I-D.rwilton-netmod-yang-packages"/> and a
	protocol based version selection scheme that can be used by
	clients to choose a particular YANG datastore schema from the
	set of datastore schema that are supported by the server.</t>
	<t>The version selection optionally allows:
	<list>
	  <t>Servers to support a single, selectable YANG package at a
	  particular version, that is used for all NETCONF/RESTCONF
	  interactions.</t>
	  <t>Servers to support multiple selectable YANG packages and package
	  versions, with different clients able to concurrently access different
	  packages and different package versions.</t>
	</list>
	</t>
      </section>
      <section anchor="schema_comp" title="YANG schema comparison tooling">
	<t>A tooling based solution is proposed for Req 2.2, that allows
	two YANG schema versions to be algorithmically compared, with the
	algorithm reporting the list of differences between the two YANG schema
	and whether each change is regarded as being backwards-compatible, or
	non-backwards-compatible.  Annotations to the YANG modules, via the use
	of extension statements, may help improve the accuracy of the comparison
	algorithm, particularly for statements that are very hard to
	algorithmically classify the scope of any differences (e.g., a
	change in the semantic behaviour of a data node defined via
	modifications to the associated YANG description statement).  Given that
	Req 2.2 is a softer requirement, and practical experience with the
	tooling is required, it is proposed that this work is deferred at this
	time.</t>
	<t>When comparing a module schema, a tool would also be able to take
	into account enabled features, deviations, and the subset of the schema
	being used by the client.  This would allow a tooling based approach to
	give a more accurate answer as to whether a client would be affected
	when upgrading between two software versions, than looking at the
	revision history, or comparing semantic version numbers.</t>
      </section>
  </section>
  <section anchor="contributor" title="Contributors">
    <t>This document grew out of the YANG module versioning design team that
    started after IETF 101. The following people are (or have been) members of
    that design team and have contributed to defining the problem and specifying
    the requirements:</t>
      <t>
        <list style="symbols">
          <t>Balazs Lengyel</t>
          <t>Benoit Claise</t>
          <t>Ebben Aries</t>
	  <t>Jason Sterne</t>
          <t>Joe Clarke</t>
          <t>Juergen Schoenwaelder</t>
          <t>Mahesh Jethanandani</t>
          <t>Michael (Wangzitao)</t>
          <t>Qin Wu</t>
          <t>Reshad Rahman</t>
          <t>Rob Wilton</t>
	  <t>Susan Hares</t>
        </list>
      </t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>
        The document does not define any new protocol or data model. There is no security impact.
      </t>
    </section>
    <section anchor="iana" title="IANA Considerations">
      <t>None</t>
    </section>

  </middle>
  <?rfc needLines="20"?>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.7950"?>
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.I-D.ietf-netmod-yang-versioning-reqs"?>
      <?rfc include="reference.I-D.rwilton-netmod-yang-packages"?>
      <?rfc include="reference.I-D.wilton-netmod-yang-ver-selection"?>
    </references>
    <references title="Informative References">
      <?rfc include="reference.RFC.8049"?>
      <?rfc include="reference.RFC.8199"?>
      <?rfc include="reference.RFC.8299"?>
    </references>
    <?rfc needLines="100"?>
  </back>
</rfc>
